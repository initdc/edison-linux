From 10461206d1dea4cd49da63e98f1e7cb101c3b26a Mon Sep 17 00:00:00 2001
From: Simon Desfarges <simonx.desfarges@intel.com>
Date: Wed, 10 Dec 2014 15:38:10 +0100
Subject: [PATCH 392/429] spi: allow max bus speed at 25MHz

Putting 0 to SCR sets the clock at 25MHz but there are issues at
reception. That is why the clock delay is enabled for frequencies above
6.25MHz, beyond this frequency, everything works well.

Signed-off-by: Simon Desfarges <simonx.desfarges@intel.com>
Signed-off-by: Khelaf Adjriou <khelaf.adjriou@intel.com>
---
 drivers/spi/intel_mid_ssp_spi.c       | 19 ++++++++++++++-----
 include/linux/spi/intel_mid_ssp_spi.h |  3 +++
 2 files changed, 17 insertions(+), 5 deletions(-)

diff --git a/drivers/spi/intel_mid_ssp_spi.c b/drivers/spi/intel_mid_ssp_spi.c
index ce5b0d0c653f..d790620e3358 100644
--- a/drivers/spi/intel_mid_ssp_spi.c
+++ b/drivers/spi/intel_mid_ssp_spi.c
@@ -906,9 +906,9 @@ static void start_bitbanging(struct ssp_drv_context *sspc)
 
 static unsigned int ssp_get_clk_div(struct ssp_drv_context *sspc, int speed)
 {
-	/* The clock divider shall stay between 3 and 4095 as specified in TRM. */
 	if (sspc->quirks & QUIRKS_PLATFORM_MRFL)
-		return clamp(25000000 / speed - 1, 3, 4095);
+		/* The clock divider shall stay between 0 and 4095. */
+		return clamp(25000000 / speed - 1, 0, 4095);
 	else
 		return clamp(100000000 / speed - 1, 3, 4095);
 }
@@ -951,7 +951,7 @@ static int handle_message(struct ssp_drv_context *sspc)
 	u32 cr0, saved_cr0, cr1, saved_cr1;
 	struct device *dev = &sspc->pdev->dev;
 	struct spi_message *msg = sspc->cur_msg;
-	u32 clk_div, saved_speed_hz;
+	u32 clk_div, saved_speed_hz, speed_hz;
 	u8 dma_enabled;
 	u32 timeout;
 	u8 chip_select;
@@ -1123,9 +1123,11 @@ static int handle_message(struct ssp_drv_context *sspc)
 
 		/* recalculate the frequency for each transfer */
 		if (transfer->speed_hz)
-			clk_div = ssp_get_clk_div(sspc, transfer->speed_hz);
+			speed_hz = transfer->speed_hz;
 		else
-			clk_div = ssp_get_clk_div(sspc, saved_speed_hz);
+			speed_hz = saved_speed_hz;
+
+		clk_div = ssp_get_clk_div(sspc, speed_hz);
 
 		cr0 &= ~SSCR0_SCR;
 		cr0 |= (clk_div & 0xFFF) << 8;
@@ -1136,6 +1138,13 @@ static int handle_message(struct ssp_drv_context *sspc)
 					(sspc->quirks & QUIRKS_BIT_BANGING))) {
 			start_bitbanging(sspc);
 		} else {
+
+			/* if speed is higher than 6.25Mhz, enable clock delay */
+			if (speed_hz > 6250000)
+				write_SSCR2((read_SSCR2(reg) | SSCR2_CLK_DEL_EN), reg);
+			else
+				write_SSCR2((read_SSCR2(reg) & ~SSCR2_CLK_DEL_EN), reg);
+
 			/* (re)start the SSP */
 			if (ssp_timing_wr) {
 				dev_dbg(dev, "original cr0 before reset:%x",
diff --git a/include/linux/spi/intel_mid_ssp_spi.h b/include/linux/spi/intel_mid_ssp_spi.h
index cb7872b286ee..2eed919ffb9d 100644
--- a/include/linux/spi/intel_mid_ssp_spi.h
+++ b/include/linux/spi/intel_mid_ssp_spi.h
@@ -109,6 +109,7 @@ DEFINE_SSP_REG(SSITR, 0x0c)
 DEFINE_SSP_REG(SSDR, 0x10)
 DEFINE_SSP_REG(SSTO, 0x28)
 DEFINE_SSP_REG(SSPSP, 0x2c)
+DEFINE_SSP_REG(SSCR2, 0x40)
 DEFINE_SSP_REG(SSFS, 0x44)
 DEFINE_SSP_REG(SFIFOL, 0x68)
 
@@ -208,6 +209,8 @@ DEFINE_SSP_REG(GAFR1_U, 0x44);
 #define SSPSP_SFRMP      (1 << 2)    /* Serial Frame Polarity */
 #define SSPSP_SCMODE(x)  ((x) << 0)  /* Serial Bit Rate Clock Mode */
 
+#define SSCR2_CLK_DEL_EN (1 << 3)	/* Delay logic for capturing input data */
+
 /*
  * For testing SSCR1 changes that require SSP restart, basically
  * everything except the service and interrupt enables
-- 
2.37.3

