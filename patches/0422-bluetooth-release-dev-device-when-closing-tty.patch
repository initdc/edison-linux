From d9d6e72c51bd253c6de8ab12e824290fc2c8be54 Mon Sep 17 00:00:00 2001
From: Zhenming Zhao <zhenmingx.zhao@intel.com>
Date: Mon, 14 Dec 2015 16:54:12 +0800
Subject: [PATCH 422/429] bluetooth: release dev device when closing tty

Edison crashes unexpectedly when closing SPP connection.
Make the process run correctly in bluetooth tty release.

Signed-off-by: Zhenming Zhao <zhenmingx.zhao@intel.com>
---
 drivers/tty/tty_io.c       |  3 +++
 include/linux/tty.h        |  1 +
 net/bluetooth/rfcomm/tty.c | 25 ++++++++++++++++++-------
 3 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 8977eaf24d9f..ee6b6b9acfd3 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -1624,6 +1624,9 @@ static void release_tty(struct tty_struct *tty, int idx)
 		tty->link->port->itty = NULL;
 	cancel_work_sync(&tty->port->buf.work);
 
+	if (tty->port->ops && tty->port->ops->destroy) {
+		tty->port->ops->destroy(tty->port);
+	}
 	if (tty->link)
 		tty_kref_put(tty->link);
 	tty_kref_put(tty);
diff --git a/include/linux/tty.h b/include/linux/tty.h
index 8780bd2a272a..d264b879f5a2 100644
--- a/include/linux/tty.h
+++ b/include/linux/tty.h
@@ -185,6 +185,7 @@ struct tty_port_operations {
 	int (*activate)(struct tty_port *port, struct tty_struct *tty);
 	/* Called on the final put of a port */
 	void (*destruct)(struct tty_port *port);
+	void (*destroy)(struct tty_port *port);
 };
 	
 struct tty_port {
diff --git a/net/bluetooth/rfcomm/tty.c b/net/bluetooth/rfcomm/tty.c
index b6e44ad6cca6..6c15ed0b984d 100644
--- a/net/bluetooth/rfcomm/tty.c
+++ b/net/bluetooth/rfcomm/tty.c
@@ -105,15 +105,28 @@ static void rfcomm_dev_destruct(struct tty_port *port)
 
 	tty_unregister_device(rfcomm_tty_driver, dev->id);
 
-	kfree(dev);
+	if (!port->ops || !port->ops->destroy) {
+		kfree(dev);
 
 	/* It's safe to call module_put() here because socket still
 	   holds reference to this module. */
+		module_put(THIS_MODULE);
+	}
+}
+
+static void rfcomm_dev_destroy(struct tty_port *port)
+{
+	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+
+	if (dev)
+		kfree(dev);
+
 	module_put(THIS_MODULE);
 }
 
 static const struct tty_port_operations rfcomm_port_ops = {
 	.destruct = rfcomm_dev_destruct,
+	.destroy = rfcomm_dev_destroy,
 };
 
 static struct rfcomm_dev *__rfcomm_dev_get(int id)
@@ -745,13 +758,11 @@ static void rfcomm_tty_close(struct tty_struct *tty, struct file *filp)
 		dev->port.tty = NULL;
 		rfcomm_dlc_unlock(dev->dlc);
 
-		if (test_bit(RFCOMM_TTY_RELEASED, &dev->flags)) {
-			spin_lock(&rfcomm_dev_lock);
-			list_del_init(&dev->list);
-			spin_unlock(&rfcomm_dev_lock);
+		spin_lock(&rfcomm_dev_lock);
+		list_del_init(&dev->list);
+		spin_unlock(&rfcomm_dev_lock);
 
-			tty_port_put(&dev->port);
-		}
+		tty_port_put(&dev->port);
 	} else
 		spin_unlock_irqrestore(&dev->port.lock, flags);
 
-- 
2.37.3

