From cf37c1d2d1e625d18c76c815c334fafdde0f5831 Mon Sep 17 00:00:00 2001
From: Sudarshan Ramachandra <sudarshan.n.ramachandra@intel.com>
Date: Mon, 21 Oct 2013 14:33:54 +0530
Subject: [PATCH 095/429] Port C state debug support to K 3.10

This patch ports C state debug support to K 3.10
by enabling cstate_ignore_add and cstate_ignore_remove
debugfs. It also adds some cleanup

Signed-off-by: Sudarshan Ramachandra <sudarshan.n.ramachandra@intel.com>
---
 .../platform/intel-mid/intel_soc_pm_debug.c   | 46 ++++++++-----------
 arch/x86/platform/intel-mid/intel_soc_pmu.c   |  8 ++--
 drivers/idle/intel_idle.c                     | 11 +++++
 3 files changed, 35 insertions(+), 30 deletions(-)

diff --git a/arch/x86/platform/intel-mid/intel_soc_pm_debug.c b/arch/x86/platform/intel-mid/intel_soc_pm_debug.c
index b3bd41fe098f..1069bc11f0ee 100644
--- a/arch/x86/platform/intel-mid/intel_soc_pm_debug.c
+++ b/arch/x86/platform/intel-mid/intel_soc_pm_debug.c
@@ -2025,13 +2025,6 @@ static ssize_t cstate_ignore_add_write(struct file *file,
 
 	if (cstate == MAX_CSTATES_POSSIBLE) {
 		mid_pmu_cxt->cstate_ignore = ((1 << CPUIDLE_STATE_MAX) - 1);
-		/* Ignore C2, C3, C4, C5, C8 states */
-		mid_pmu_cxt->cstate_ignore |= (1 << 1);
-		mid_pmu_cxt->cstate_ignore |= (1 << 2);
-		mid_pmu_cxt->cstate_ignore |= (1 << 3);
-		mid_pmu_cxt->cstate_ignore |= (1 << 4);
-		mid_pmu_cxt->cstate_ignore |= (1 << 7);
-
 		pm_qos_update_request(mid_pmu_cxt->cstate_qos,
 					CSTATE_EXIT_LATENCY_C1 - 1);
 	} else {
@@ -2046,13 +2039,6 @@ static ssize_t cstate_ignore_add_write(struct file *file,
 		/* by default remove C1 from ignore list */
 		mid_pmu_cxt->cstate_ignore &= ~(1 << 0);
 
-		/* Ignore C2, C3, C4, C5, C8 states */
-		mid_pmu_cxt->cstate_ignore |= (1 << 1);
-		mid_pmu_cxt->cstate_ignore |= (1 << 2);
-		mid_pmu_cxt->cstate_ignore |= (1 << 3);
-		mid_pmu_cxt->cstate_ignore |= (1 << 4);
-		mid_pmu_cxt->cstate_ignore |= (1 << 7);
-
 		/* populate cstate latency table */
 		cstate_exit_latency[0] = CSTATE_EXIT_LATENCY_C1;
 		cstate_exit_latency[1] = CSTATE_EXIT_LATENCY_C2;
@@ -2144,12 +2130,12 @@ static ssize_t cstate_ignore_remove_write(struct file *file,
 	if (cstate == MAX_CSTATES_POSSIBLE) {
 		mid_pmu_cxt->cstate_ignore =
 				~((1 << CPUIDLE_STATE_MAX) - 1);
-		/* Ignore C2, C3, C4, C5, C8 states */
+		/* Ignore C2, C3, C5, C8 and C10 states */
 		mid_pmu_cxt->cstate_ignore |= (1 << 1);
 		mid_pmu_cxt->cstate_ignore |= (1 << 2);
-		mid_pmu_cxt->cstate_ignore |= (1 << 3);
 		mid_pmu_cxt->cstate_ignore |= (1 << 4);
 		mid_pmu_cxt->cstate_ignore |= (1 << 7);
+		mid_pmu_cxt->cstate_ignore |= (1 << 9);
 
 		pm_qos_update_request(mid_pmu_cxt->cstate_qos,
 						PM_QOS_DEFAULT_VALUE);
@@ -2178,12 +2164,12 @@ static ssize_t cstate_ignore_remove_write(struct file *file,
 		/* by default remove C1 from ignore list */
 		mid_pmu_cxt->cstate_ignore &= ~(1 << 0);
 
-		/* Ignore C2, C3, C4, C5, C8 states */
+		/* Ignore C2, C3, C5, C8 and C10 states */
 		mid_pmu_cxt->cstate_ignore |= (1 << 1);
 		mid_pmu_cxt->cstate_ignore |= (1 << 2);
-		mid_pmu_cxt->cstate_ignore |= (1 << 3);
 		mid_pmu_cxt->cstate_ignore |= (1 << 4);
 		mid_pmu_cxt->cstate_ignore |= (1 << 7);
+		mid_pmu_cxt->cstate_ignore |= (1 << 9);
 
 		local_cstate_allowed = ~mid_pmu_cxt->cstate_ignore;
 		/* restrict to max c-states */
@@ -2261,7 +2247,7 @@ static const struct file_operations s3_ctrl_ops = {
 unsigned int pmu_get_new_cstate(unsigned int cstate, int *index)
 {
 	static int cstate_index_table[CPUIDLE_STATE_MAX] = {
-					1, 1, 1, 1, 1, 2, 3, 4, 5, 5};
+					1, 1, 1, 1, 1, 2, 3, 3, 4, 4};
 	unsigned int new_cstate = cstate;
 	u32 local_cstate = (u32)(cstate);
 	u32 local_cstate_allowed = ~mid_pmu_cxt->cstate_ignore;
@@ -2273,17 +2259,16 @@ unsigned int pmu_get_new_cstate(unsigned int cstate, int *index)
 			local_cstate = 9;
 
 		/* get next low cstate allowed */
-		cstate_mask	= (u32)((1 << local_cstate)-1);
+		cstate_mask = (u32)((1 << local_cstate)-1);
+		/* in case if cstate == 0 which should not be the case*/
+		cstate_mask |= 1;
 		local_cstate_allowed	&= ((1<<CPUIDLE_STATE_MAX)-1);
 		local_cstate_allowed	&= cstate_mask;
 		if (!could_do_s0ix())
 			local_cstate_allowed &= cstate_no_s0ix_mask;
 		new_cstate	= fls(local_cstate_allowed);
 
-		if (likely(new_cstate))
-			*index	= cstate_index_table[new_cstate-1];
-		else
-			new_cstate = 1;
+		*index	= cstate_index_table[new_cstate-1];
 	}
 
 	return new_cstate;
@@ -2427,10 +2412,9 @@ void pmu_stats_init(void)
 			mid_pmu_cxt->cstate_ignore =
 				~((1 << CPUIDLE_STATE_MAX) - 1);
 
-			/* Ignore C2, C3, C4, C5 states */
+			/* Ignore C2, C3, C5 states */
 			mid_pmu_cxt->cstate_ignore |= (1 << 1);
 			mid_pmu_cxt->cstate_ignore |= (1 << 2);
-			mid_pmu_cxt->cstate_ignore |= (1 << 3);
 			mid_pmu_cxt->cstate_ignore |= (1 << 4);
 
 			/* For now ignore C7, C8, C9, C10 states */
@@ -2438,6 +2422,16 @@ void pmu_stats_init(void)
 			mid_pmu_cxt->cstate_ignore |= (1 << 7);
 			mid_pmu_cxt->cstate_ignore |= (1 << 8);
 			mid_pmu_cxt->cstate_ignore |= (1 << 9);
+		} else {
+			mid_pmu_cxt->cstate_ignore =
+				~((1 << CPUIDLE_STATE_MAX) - 1);
+
+			/* Ignore C2, C3, C5, C8 and C10 states */
+			mid_pmu_cxt->cstate_ignore |= (1 << 1);
+			mid_pmu_cxt->cstate_ignore |= (1 << 2);
+			mid_pmu_cxt->cstate_ignore |= (1 << 4);
+			mid_pmu_cxt->cstate_ignore |= (1 << 7);
+			mid_pmu_cxt->cstate_ignore |= (1 << 9);
 		}
 
 		mid_pmu_cxt->cstate_qos =
diff --git a/arch/x86/platform/intel-mid/intel_soc_pmu.c b/arch/x86/platform/intel-mid/intel_soc_pmu.c
index 1feba003bd5b..3ae8174b1325 100644
--- a/arch/x86/platform/intel-mid/intel_soc_pmu.c
+++ b/arch/x86/platform/intel-mid/intel_soc_pmu.c
@@ -868,10 +868,9 @@ int set_enable_s0ix(const char *val, struct kernel_param *kp)
 			mid_pmu_cxt->cstate_ignore =
 				~((1 << CPUIDLE_STATE_MAX) - 1);
 
-			/* Ignore C2, C3, C4, C5 states */
+			/* Ignore C2, C3, C5 states */
 			mid_pmu_cxt->cstate_ignore |= (1 << 1);
 			mid_pmu_cxt->cstate_ignore |= (1 << 2);
-			mid_pmu_cxt->cstate_ignore |= (1 << 3);
 			mid_pmu_cxt->cstate_ignore |= (1 << 4);
 
 			/* For now ignore C7, C8, C9, C10 states */
@@ -887,11 +886,12 @@ int set_enable_s0ix(const char *val, struct kernel_param *kp)
 			mid_pmu_cxt->cstate_ignore =
 				~((1 << CPUIDLE_STATE_MAX) - 1);
 
-			/* Ignore C2, C3, C4, C5 states */
+			/* Ignore C2, C3, C5, C8 and C10 states */
 			mid_pmu_cxt->cstate_ignore |= (1 << 1);
 			mid_pmu_cxt->cstate_ignore |= (1 << 2);
-			mid_pmu_cxt->cstate_ignore |= (1 << 3);
 			mid_pmu_cxt->cstate_ignore |= (1 << 4);
+			mid_pmu_cxt->cstate_ignore |= (1 << 7);
+			mid_pmu_cxt->cstate_ignore |= (1 << 9);
 
 			pm_qos_update_request(mid_pmu_cxt->cstate_qos,
 							PM_QOS_DEFAULT_VALUE);
diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index 6a1d573ae610..0b50d7c3c51e 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -662,6 +662,17 @@ static int intel_idle(struct cpuidle_device *dev,
 	unsigned int cstate;
 	int cpu = smp_processor_id();
 
+#if (defined(CONFIG_REMOVEME_INTEL_ATOM_MRFLD_POWER) && \
+	defined(CONFIG_PM_DEBUG))
+	{
+		/* Get Cstate based on ignore table from PMU driver */
+		unsigned int ncstate;
+		cstate =
+		(((eax) >> MWAIT_SUBSTATE_SIZE) & MWAIT_CSTATE_MASK) + 1;
+		ncstate = pmu_get_new_cstate(cstate, &index);
+		eax	= flg2MWAIT(drv->states[index].flags);
+	}
+#endif
 	cstate = (((eax) >> MWAIT_SUBSTATE_SIZE) & MWAIT_CSTATE_MASK) + 1;
 
 	/*
-- 
2.37.3

