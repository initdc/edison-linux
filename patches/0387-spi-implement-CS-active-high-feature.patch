From c19aef83381ec2b4307542254652f589e40722d7 Mon Sep 17 00:00:00 2001
From: Simon Desfarges <simonx.desfarges@intel.com>
Date: Thu, 20 Nov 2014 17:58:30 +0100
Subject: [PATCH 387/429] spi: implement CS active high feature

Signed-off-by: Simon Desfarges <simonx.desfarges@intel.com>
---
 .../intel-mid/device_libs/platform_spidev.c   |  2 +-
 drivers/spi/intel_mid_ssp_spi.c               | 28 ++++++++++++++++---
 include/linux/spi/intel_mid_ssp_spi.h         |  7 ++---
 3 files changed, 27 insertions(+), 10 deletions(-)

diff --git a/arch/x86/platform/intel-mid/device_libs/platform_spidev.c b/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
index 8eaa92f2f0d2..c6b3f7bcb058 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
@@ -33,7 +33,7 @@ static struct intel_mid_ssp_spi_chip chip = {
 
 static void tng_ssp_spi_cs_control(u32 command)
 {
-	gpio_set_value(tng_ssp_spi2_FS_gpio, (command == CS_ASSERT) ? 0 : 1);
+	gpio_set_value(tng_ssp_spi2_FS_gpio, (command != 0) ? 1 : 0);
 }
 
 static void tng_ssp_spi_platform_pinmux(void)
diff --git a/drivers/spi/intel_mid_ssp_spi.c b/drivers/spi/intel_mid_ssp_spi.c
index 86f58a3d912f..ce5b0d0c653f 100644
--- a/drivers/spi/intel_mid_ssp_spi.c
+++ b/drivers/spi/intel_mid_ssp_spi.c
@@ -728,7 +728,7 @@ static void int_transfer_complete(struct ssp_drv_context *sspc)
 #endif
 
 	if (sspc->cs_control)
-		sspc->cs_control(CS_DEASSERT);
+		sspc->cs_control(!sspc->cs_assert);
 
 	dev_dbg(dev, "End of transfer. SSSR:%08X\n", read_SSSR(reg));
 	msg = sspc->cur_msg;
@@ -1153,7 +1153,7 @@ static int handle_message(struct ssp_drv_context *sspc)
 		}
 
 		if (sspc->cs_control)
-			sspc->cs_control(CS_ASSERT);
+			sspc->cs_control(sspc->cs_assert);
 
 		if (likely(dma_enabled)) {
 			if (unlikely(sspc->quirks & QUIRKS_USE_PM_QOS))
@@ -1168,7 +1168,7 @@ static int handle_message(struct ssp_drv_context *sspc)
 		if (list_is_last(&transfer->transfer_list, &msg->transfers)
 				|| sspc->cs_change) {
 			if (sspc->cs_control)
-				sspc->cs_control(CS_DEASSERT);
+				sspc->cs_control(!sspc->cs_assert);
 		}
 
 	} /* end of list_for_each_entry */
@@ -1259,6 +1259,26 @@ static int setup(struct spi_device *spi)
 	/* chip_info isn't always needed */
 	chip->cr1 = 0;
 	if (chip_info) {
+		/* If user requested CS Active High need to verify that there
+		 * is no transfer pending. If this is the case, kindly fail.  */
+		if ((spi->mode & SPI_CS_HIGH) != sspc->cs_assert) {
+			if (sspc->cur_msg) {
+				dev_err(&spi->dev, "message pending... Failing\n");
+				/* A message is currently in transfer. Do not toggle CS */
+				spin_unlock_irqrestore(&sspc->lock, flags);
+				return -EAGAIN;
+			}
+			if (!chip_info->cs_control) {
+				/* unable to control cs by hand */
+				dev_err(&spi->dev,
+						"This CS does not support SPI_CS_HIGH flag\n");
+				spin_unlock_irqrestore(&sspc->lock, flags);
+				return -EINVAL;
+			}
+			sspc->cs_assert = spi->mode & SPI_CS_HIGH;
+			chip_info->cs_control(!sspc->cs_assert);
+		}
+
 		burst_size = chip_info->burst_size;
 		if (burst_size > IMSS_FIFO_BURST_8)
 			burst_size = DFLT_FIFO_BURST_SIZE;
@@ -1458,7 +1478,7 @@ static int intel_mid_ssp_spi_probe(struct pci_dev *pdev,
 	if (ssp_cfg_is_spi_slave(ssp_cfg))
 		sspc->quirks |= QUIRKS_SPI_SLAVE_CLOCK_MODE;
 
-	master->mode_bits = SPI_CPOL | SPI_CPHA;
+	master->mode_bits = SPI_CS_HIGH | SPI_CPOL | SPI_CPHA;
 	master->bus_num = ssp_cfg_get_spi_bus_nb(ssp_cfg);
 	master->num_chipselect = 4;
 	master->cleanup = cleanup;
diff --git a/include/linux/spi/intel_mid_ssp_spi.h b/include/linux/spi/intel_mid_ssp_spi.h
index 453c40bc84f9..cb7872b286ee 100644
--- a/include/linux/spi/intel_mid_ssp_spi.h
+++ b/include/linux/spi/intel_mid_ssp_spi.h
@@ -220,11 +220,6 @@ DEFINE_SSP_REG(GAFR1_U, 0x44);
 				| SSCR1_RFT | SSCR1_TFT | SSCR1_MWDS \
 				| SSCR1_SPH | SSCR1_SPO | SSCR1_LBM)
 
-/* add CS control call back feature to give user capability
-to control CS signal by themselves*/
-#define CS_DEASSERT	0
-#define CS_ASSERT		1
-
 struct callback_param {
 	void *drv_context;
 	u32 direction;
@@ -301,6 +296,8 @@ struct ssp_drv_context {
 	unsigned long quirks;
 	u32 rx_fifo_threshold;
 
+	/* if CS_ACTIVE_HIGH, cs_assert == 1 else cs_assert == 0 */
+	int cs_assert;
 	int cs_change;
 	void (*cs_control)(u32 command);
 };
-- 
2.37.3

