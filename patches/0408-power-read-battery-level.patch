From 7534534a198e7031bbb6615e95cbe23cafd36daa Mon Sep 17 00:00:00 2001
From: Shimin Zhou <shimingx.zhou@intel.com>
Date: Thu, 4 Jun 2015 14:09:54 +0800
Subject: [PATCH 408/429] power: read battery level

Add function of reading the voltage of battery and
sys file node for user to read.

Signed-off-by: Shimin Zhou <shimingx.zhou@intel.com>
---
 drivers/power/pmic_ccsm.c | 87 +++++++++++++++++++++++++++++++++++++++
 drivers/power/pmic_ccsm.h | 10 +++++
 2 files changed, 97 insertions(+)

diff --git a/drivers/power/pmic_ccsm.c b/drivers/power/pmic_ccsm.c
index e5adebe7d20e..87ae3da5a4e3 100644
--- a/drivers/power/pmic_ccsm.c
+++ b/drivers/power/pmic_ccsm.c
@@ -237,6 +237,19 @@ static int adc_temp_conv(int in_val, int *out_val, int conv)
 	return 0;
 }
 
+static int pmic_write_reg(u16 addr, u8 *val)
+{
+	int ret;
+
+	ret = intel_scu_ipc_iowrite8(addr, val);
+	if (ret) {
+		dev_err(chc.dev,
+			"Error in intel_scu_ipc_ioread8 0x%.4x\n", addr);
+		return -EIO;
+	}
+	return 0;
+}
+
 static int pmic_read_reg(u16 addr, u8 *val)
 {
 	int ret;
@@ -414,6 +427,8 @@ static struct pmic_regs_def pmic_regs_bc[] = {
 	PMIC_REG_DEF(THRMZN3H_ADDR_BC),
 	PMIC_REG_DEF(THRMZN4L_ADDR_BC),
 	PMIC_REG_DEF(THRMZN4H_ADDR_BC),
+	PMIC_REG_DEF(VBATRSLTH_ADDR_BC),
+	PMIC_REG_DEF(VBATRSLTL_ADDR_BC),
 };
 
 static struct pmic_regs_def pmic_regs_sc[] = {
@@ -986,6 +1001,43 @@ int pmic_get_battery_pack_temp(int *temp)
 	return pmic_read_adc_val(GPADC_BATTEMP0, temp, &chc);
 }
 
+int pmic_get_battery_voltage(int *vol)
+{
+	long tmp;
+	int ret;
+	u8 val;
+
+	ret = pmic_write_reg(GPADCREQ_ADDR_BC, GPADCREG_VIBATT_REQ);
+	if (ret != 0) {
+		dev_err(chc.dev,
+			"Error writing GPADCREQ_ADDR_BC-register\n");
+		return -EINVAL;
+	}
+	msleep(200);
+
+	ret = pmic_read_reg(VBATRSLTH_ADDR_BC, &val);
+	if (ret != 0) {
+		dev_err(chc.dev,
+			"Error reading VBATRSLTH_ADDR_BC-register\n");
+		return -EINVAL;
+	}
+	tmp = val * 0x100;
+
+	ret = pmic_read_reg(VBATRSLTL_ADDR_BC, &val);
+	if (ret != 0) {
+		dev_err(chc.dev,
+			"Error reading VBATRSLTL_ADDR_BC-register\n");
+		return -EINVAL;
+	}
+
+	tmp += val;
+	tmp *= GPADC_MAX_VOLTAGE;
+	tmp /= GPADC_MAX_RANGE;
+	*vol = tmp;
+
+	return 0;
+}
+
 static int get_charger_type()
 {
 	int ret, i = 0;
@@ -1561,6 +1613,34 @@ static int pmic_check_initial_events(void)
 	return ret;
 }
 
+static ssize_t
+pmic_show_battery_level(struct device *d, struct device_attribute *attr,
+			char *buf)
+{
+	int ret = 0;
+
+	ret = pmic_get_battery_voltage(&chc.battry_voltage);
+	if (ret != 0) {
+		dev_info(chc.dev, "read error!\n");
+		return -1;
+	}
+
+	return sprintf(buf, "0x%x\n", chc.battry_voltage);
+}
+
+static DEVICE_ATTR(battery_level, S_IWUSR | S_IRUGO, pmic_show_battery_level,
+		   NULL);
+
+static struct attribute *pmic_sysfs_entries[] = {
+	&dev_attr_battery_level.attr,
+	NULL
+};
+
+static struct attribute_group pmic_attribute_group = {
+	.name  = NULL,		/* put in device directory */
+	.attrs = pmic_sysfs_entries,
+};
+
 /**
  * pmic_charger_probe - PMIC charger probe function
  * @pdev: pmic platform device structure
@@ -1728,6 +1808,12 @@ static int pmic_chrgr_probe(struct platform_device *pdev)
 	if (unlikely(retval))
 		goto unmask_irq_failed;
 
+	retval = sysfs_create_group(&pdev->dev.kobj, &pmic_attribute_group);
+	if (retval) {
+		dev_err(&pdev->dev, "failed to create sysfs device attributes\n");
+		goto unmask_irq_failed;
+	}
+
 	chc.health = POWER_SUPPLY_HEALTH_GOOD;
 #ifdef CONFIG_DEBUG_FS
 	pmic_debugfs_init();
@@ -1776,6 +1862,7 @@ static int pmic_chrgr_remove(struct platform_device *pdev)
 		kfree(chc->sfi_bcprof);
 		kfree(chc->actual_bcprof);
 		kfree(chc->runtime_bcprof);
+		sysfs_remove_group(&pdev->dev.kobj, &pmic_attribute_group);
 	}
 
 	return 0;
diff --git a/drivers/power/pmic_ccsm.h b/drivers/power/pmic_ccsm.h
index 7619389ec1dd..77b6b2e7bb26 100644
--- a/drivers/power/pmic_ccsm.h
+++ b/drivers/power/pmic_ccsm.h
@@ -69,6 +69,12 @@
 #define THRMZN4H_ADDR_BC		0xD6
 #define THRMZN4L_ADDR_BC		0xD7
 
+#define GPADCREQ_ADDR_BC		0xDC
+#define GPADCREG_VIBATT_REQ		(0x01 << 5)
+
+#define VBATRSLTH_ADDR_BC		0xE9
+#define VBATRSLTL_ADDR_BC		0xEA
+
 #define THRMZN0H_ADDR_SC		0xD7
 #define THRMZN0L_ADDR_SC		0xD8
 #define THRMZN1H_ADDR_SC		0xD9
@@ -288,6 +294,9 @@
 #define PMIC_REG_NAME_LEN		28
 #define PMIC_REG_DEF(x) { .reg_name = #x, .addr = x }
 
+#define GPADC_MAX_VOLTAGE		450
+#define GPADC_MAX_RANGE 		1024
+
 struct interrupt_info {
 	/* Interrupt register mask*/
 	u8 int_reg_mask;
@@ -325,6 +334,7 @@ struct pmic_chrgr_drv_context {
 	void __iomem *pmic_intr_iomap;
 	struct device *dev;
 	int health;
+	int battry_voltage;
 	u8 pmic_id;
 	bool is_internal_usb_phy;
 	enum pmic_charger_cable_type charger_type;
-- 
2.37.3

