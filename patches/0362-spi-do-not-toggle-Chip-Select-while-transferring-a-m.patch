From e7a7462cad1d9f95783196b8fad3af2a73cb89e4 Mon Sep 17 00:00:00 2001
From: Simon Desfarges <simonx.desfarges@intel.com>
Date: Fri, 29 Aug 2014 14:20:35 +0200
Subject: [PATCH 362/429] spi: do not toggle Chip Select while transferring a
 message

In polling mode, each word are sent after verifying the output FIFO is empty.
This behavior makes the CS line automatically de-asserted between each word by
the SPI Core. That is not SPI compliant.

This patch makes the CS handled as a gpio and not automatically by the SPI
Core.

Signed-off-by: Simon Desfarges <simonx.desfarges@intel.com>
---
 .../intel-mid/device_libs/platform_spidev.c   | 33 +++++++++++++++++++
 drivers/spi/intel_mid_ssp_spi.c               | 10 ++++++
 include/linux/lnw_gpio.h                      |  1 +
 include/linux/spi/intel_mid_ssp_spi.h         |  1 +
 4 files changed, 45 insertions(+)

diff --git a/arch/x86/platform/intel-mid/device_libs/platform_spidev.c b/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
index a2b2ec3921af..6e88dad1c5f0 100644
--- a/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
+++ b/arch/x86/platform/intel-mid/device_libs/platform_spidev.c
@@ -13,15 +13,48 @@
 #include <linux/spi/spi.h>
 #include <linux/spi/intel_mid_ssp_spi.h>
 #include <asm/intel-mid.h>
+#include <linux/gpio.h>
+#include <linux/lnw_gpio.h>
 #include "platform_spidev.h"
 
+static void tng_ssp_spi_cs_control(u32 command);
+static void tng_ssp_spi_platform_pinmux(void);
+
+static int tng_ssp_spi2_FS_gpio = 111;
+
 static struct intel_mid_ssp_spi_chip chip = {
 	.burst_size = DFLT_FIFO_BURST_SIZE,
 	.timeout = DFLT_TIMEOUT_VAL,
 	/* SPI DMA is currently not usable on Tangier */
 	.dma_enabled = false,
+	.cs_control = tng_ssp_spi_cs_control,
+	.platform_pinmux = tng_ssp_spi_platform_pinmux,
 };
 
+static void tng_ssp_spi_cs_control(u32 command)
+{
+	gpio_set_value(tng_ssp_spi2_FS_gpio, (command == CS_ASSERT) ? 0 : 1);
+}
+
+static void tng_ssp_spi_platform_pinmux(void)
+{
+	int err;
+	int saved_muxing;
+	/* Request Chip Select gpios */
+	saved_muxing = gpio_get_alt(tng_ssp_spi2_FS_gpio);
+
+	lnw_gpio_set_alt(tng_ssp_spi2_FS_gpio, LNW_GPIO);
+	err = gpio_request_one(tng_ssp_spi2_FS_gpio,
+			GPIOF_DIR_OUT|GPIOF_INIT_HIGH, "Arduino Shield SS");
+	if (err) {
+		pr_err("%s: unable to get Chip Select GPIO,
+				fallback to legacy CS mode \n", __func__);
+		lnw_gpio_set_alt(tng_ssp_spi2_FS_gpio, saved_muxing);
+		chip.cs_control = NULL;
+		chip.platform_pinmux = NULL;
+	}
+}
+
 void __init *spidev_platform_data(void *info)
 {
 	struct spi_board_info *spi_info = info;
diff --git a/drivers/spi/intel_mid_ssp_spi.c b/drivers/spi/intel_mid_ssp_spi.c
index 95d7b34c66c5..5880718756f2 100644
--- a/drivers/spi/intel_mid_ssp_spi.c
+++ b/drivers/spi/intel_mid_ssp_spi.c
@@ -1111,6 +1111,7 @@ static int setup(struct spi_device *spi)
 	u32 tx_fifo_threshold;
 	u32 burst_size;
 	u32 clk_div;
+	static u32 one_time_setup = 1;
 
 	if (!spi->bits_per_word)
 		spi->bits_per_word = DFLT_BITS_PER_WORD;
@@ -1152,6 +1153,15 @@ static int setup(struct spi_device *spi)
 		chip->dma_enabled = chip_info->dma_enabled;
 		chip->cs_control = chip_info->cs_control;
 
+		/* Request platform-specific gpio and pinmux here since
+		 * it is not possible to get the intel_mid_ssp_spi_chip
+		 * structure in probe */
+		if (one_time_setup && !chip_info->dma_enabled
+				&& chip_info->platform_pinmux) {
+			chip_info->platform_pinmux();
+			one_time_setup = 0;
+		}
+
 	} else {
 		/* if no chip_info provided by protocol driver, */
 		/* set default values                           */
diff --git a/include/linux/lnw_gpio.h b/include/linux/lnw_gpio.h
index 9cde4d2a31ca..2e9f6b25ab17 100644
--- a/include/linux/lnw_gpio.h
+++ b/include/linux/lnw_gpio.h
@@ -9,5 +9,6 @@ enum {
 };
 
 void lnw_gpio_set_alt(int gpio, int alt);
+int gpio_get_alt(int gpio);
 
 #endif
diff --git a/include/linux/spi/intel_mid_ssp_spi.h b/include/linux/spi/intel_mid_ssp_spi.h
index 8819f084593c..453c40bc84f9 100644
--- a/include/linux/spi/intel_mid_ssp_spi.h
+++ b/include/linux/spi/intel_mid_ssp_spi.h
@@ -335,6 +335,7 @@ struct intel_mid_ssp_spi_chip {
 	u8 enable_loopback;
 	u8 dma_enabled;
 	void (*cs_control)(u32 command);
+	void (*platform_pinmux)(void);
 };
 
 #define SPI_DIB_NAME_LEN  16
-- 
2.37.3

