From b83b7a6fd37424078be4c98c454c25dd4c0355ad Mon Sep 17 00:00:00 2001
From: Shimin Zhou <shimingx.zhou@intel.com>
Date: Thu, 8 Sep 2016 15:37:33 +0800
Subject: [PATCH 429/429] spi: add policy to manage switching between DMA and
 polling

Although spi polling method increases system cost, but it is
efficient when transferring small packages. Add a policy to
adopt DMA method when clock frequency larger than 4MHz and
length of package exceeds 500 bytes. Otherwise, it adopt
polling tranfer method.

Change-Id: I48522d31c7729d04ced2b038a3ccf2b139e51682
Signed-off-by: Shimin Zhou <shimingx.zhou@intel.com>
---
 drivers/spi/intel_mid_ssp_spi.c       | 35 +++++++++++++--------------
 drivers/spi/spidev.c                  |  3 +++
 include/linux/spi/intel_mid_ssp_spi.h |  2 --
 include/linux/spi/spi.h               |  1 +
 4 files changed, 21 insertions(+), 20 deletions(-)

diff --git a/drivers/spi/intel_mid_ssp_spi.c b/drivers/spi/intel_mid_ssp_spi.c
index 3199e612dc02..411048709ae5 100644
--- a/drivers/spi/intel_mid_ssp_spi.c
+++ b/drivers/spi/intel_mid_ssp_spi.c
@@ -808,26 +808,20 @@ static irqreturn_t ssp_int(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static void poll_writer(struct work_struct *work)
-{
-	struct ssp_drv_context *sspc =
-		container_of(work, struct ssp_drv_context, poll_write);
-	struct device *dev = &sspc->pdev->dev;
-	size_t pkg_len = sspc->len;
-	int ret;
-
-	while ((pkg_len > 0)) {
-		ret = sspc->write(sspc);
-		pkg_len -= ret;
-	}
-}
-
 /*
  * Perform a single transfer.
  */
 static void poll_transfer(unsigned long data)
 {
 	struct ssp_drv_context *sspc = (void *)data;
+	size_t pkg_lenth = sspc->len;
+	int ret;
+
+	while ((pkg_lenth > 0)) {
+		ret = sspc->write(sspc);
+		sspc->read(sspc);
+		pkg_lenth -= ret;
+	}
 
 	while (!sspc->read(sspc))
 		cpu_relax();
@@ -1131,6 +1125,15 @@ static int handle_message(struct ssp_drv_context *sspc)
 		else
 			speed_hz = saved_speed_hz;
 
+		if ((speed_hz > 4000000) && (msg->the_max_pkt > 500))
+		{
+			dma_enabled = 1;
+		}
+		else
+		{
+			dma_enabled = 0;
+		}
+
 		clk_div = ssp_get_clk_div(sspc, speed_hz);
 
 		cr0 &= ~SSCR0_SCR;
@@ -1175,7 +1178,6 @@ static int handle_message(struct ssp_drv_context *sspc)
 			dma_transfer(sspc);
 		} else {
 			/* Do the transfer syncronously */
-			queue_work(sspc->wq_poll_write, &sspc->poll_write);
 			poll_transfer((unsigned long)sspc);
 			unmap_dma_buffers(sspc);
 			complete(&sspc->msg_done);
@@ -1580,9 +1582,6 @@ static int intel_mid_ssp_spi_probe(struct pci_dev *pdev,
 	INIT_WORK(&sspc->pump_messages, pump_messages);
 	sspc->workqueue = create_singlethread_workqueue(dev_name(&pdev->dev));
 
-	INIT_WORK(&sspc->poll_write, poll_writer);
-	sspc->wq_poll_write = create_singlethread_workqueue("spi_poll_wr");
-
 	/* Register with the SPI framework */
 	dev_info(dev, "register with SPI framework (bus spi%d)\n",
 			master->bus_num);
diff --git a/drivers/spi/spidev.c b/drivers/spi/spidev.c
index 12112a1f3edc..aa1ae9f6490d 100644
--- a/drivers/spi/spidev.c
+++ b/drivers/spi/spidev.c
@@ -237,6 +237,7 @@ static int spidev_message(struct spidev_data *spidev,
 	 */
 	buf = spidev->buffer;
 	total = 0;
+	msg.the_max_pkt = 0;
 	for (n = n_xfers, k_tmp = k_xfers, u_tmp = u_xfers;
 			n;
 			n--, k_tmp++, u_tmp++) {
@@ -282,6 +283,8 @@ static int spidev_message(struct spidev_data *spidev,
 			u_tmp->delay_usecs,
 			u_tmp->speed_hz ? : spidev->spi->max_speed_hz);
 #endif
+		if (msg.the_max_pkt < k_tmp->len) msg.the_max_pkt = k_tmp->len;
+
 		spi_message_add_tail(k_tmp, &msg);
 	}
 
diff --git a/include/linux/spi/intel_mid_ssp_spi.h b/include/linux/spi/intel_mid_ssp_spi.h
index b212eee324d0..2eed919ffb9d 100644
--- a/include/linux/spi/intel_mid_ssp_spi.h
+++ b/include/linux/spi/intel_mid_ssp_spi.h
@@ -257,9 +257,7 @@ struct ssp_drv_context {
 
 	spinlock_t lock;
 	struct workqueue_struct *workqueue;
-	struct workqueue_struct *wq_poll_write;
 	struct work_struct pump_messages;
-	struct work_struct poll_write;
 	struct list_head queue;
 	struct completion msg_done;
 
diff --git a/include/linux/spi/spi.h b/include/linux/spi/spi.h
index 6ff26c8db7b9..e2164ee90115 100644
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@ -575,6 +575,7 @@ struct spi_message {
 	/* completion is reported through a callback */
 	void			(*complete)(void *context);
 	void			*context;
+	unsigned		the_max_pkt;
 	unsigned		actual_length;
 	int			status;
 
-- 
2.37.3

